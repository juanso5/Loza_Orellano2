"use client";import { useState, useEffect } from "react";import SidebarProvider from "../../components/SidebarProvider";import RendimientoCard from "../../components/RendimientoCard";import { LoadingSpinner } from "../../components/ui";import "../../styles/liquidez.css"; // Reutilizar estilos de liquidezexport default function RendimientosPage() {  // Estado de clientes y selección  const [clientes, setClientes] = useState([]);  const [selectedClientId, setSelectedClientId] = useState(null);  const [searchQuery, setSearchQuery] = useState("");  // Estado de período  const [periodoPreset, setPeriodoPreset] = useState("ultimo_mes");  const [fechaInicio, setFechaInicio] = useState("");  const [fechaFin, setFechaFin] = useState("");  // Estado de datos  const [rendimientos, setRendimientos] = useState(null);  const [loading, setLoading] = useState({    clientes: true,    rendimientos: false,  });  const [error, setError] = useState(null);  // Cargar clientes al montar  useEffect(() => {    (async () => {      try {        setLoading(prev => ({ ...prev, clientes: true }));        const res = await fetch("/api/cliente", { cache: "no-store" });        const json = await res.json();        // El API de cliente retorna { data: [...] } sin campo success        if (Array.isArray(json.data)) {          setClientes(json.data);          // Auto-seleccionar primer cliente          if (json.data.length > 0) {            setSelectedClientId(json.data[0].id);          }        }      } catch (err) {        setError("Error al cargar clientes");      } finally {        setLoading(prev => ({ ...prev, clientes: false }));      }    })();  }, []);  // Inicializar período al montar (último mes por defecto)  useEffect(() => {    const hoy = new Date();    const inicioMes = new Date(hoy.getFullYear(), hoy.getMonth(), 1);    setFechaFin(hoy.toISOString().split('T')[0]);    setFechaInicio(inicioMes.toISOString().split('T')[0]);  }, []);  // Calcular fechas según preset  const calcularFechasPorPreset = (preset) => {    const hoy = new Date();    let inicio;    switch (preset) {      case "ultimo_mes":        inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);        break;      case "3_meses":        inicio = new Date(hoy);        inicio.setMonth(inicio.getMonth() - 3);        break;      case "6_meses":        inicio = new Date(hoy);        inicio.setMonth(inicio.getMonth() - 6);        break;      case "1_ano":        inicio = new Date(hoy);        inicio.setFullYear(inicio.getFullYear() - 1);        break;      case "ytd": // Year to date        inicio = new Date(hoy.getFullYear(), 0, 1);        break;      case "custom":        // Mantener fechas actuales        return;      default:        inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);    }    setFechaInicio(inicio.toISOString().split('T')[0]);    setFechaFin(hoy.toISOString().split('T')[0]);  };  // Manejar cambio de preset  const handlePresetChange = (preset) => {    setPeriodoPreset(preset);    calcularFechasPorPreset(preset);  };  // Cargar rendimientos cuando cambia cliente o período  useEffect(() => {    if (!selectedClientId || !fechaInicio || !fechaFin) {      setRendimientos(null);      return;    }    (async () => {      try {        setLoading(prev => ({ ...prev, rendimientos: true }));        setError(null);        const url = `/api/rendimiento?cliente_id=${selectedClientId}&fecha_inicio=${fechaInicio}&fecha_fin=${fechaFin}`;        const res = await fetch(url, { cache: "no-store" });        if (!res.ok) {          const errorText = await res.text();          throw new Error(`Error HTTP ${res.status}: ${errorText}`);        }        const json = await res.json();        if (!json.success) {          throw new Error(json.error || "Error al cargar rendimientos");        }        setRendimientos(json.data);      } catch (err) {        setError(err.message || "Error al cargar rendimientos");      } finally {        setLoading(prev => ({ ...prev, rendimientos: false }));      }    })();  }, [selectedClientId, fechaInicio, fechaFin]);  const clienteActual = clientes.find(c => c.id === selectedClientId);  const filteredClientes = clientes.filter((c) =>    c.name?.toLowerCase().includes(searchQuery.toLowerCase())  );  // Formato de números  const formatMoney = (num) => {    return new Intl.NumberFormat('es-AR', {      style: 'currency',      currency: 'USD',      minimumFractionDigits: 2,      maximumFractionDigits: 2,    }).format(num);  };  const formatPercent = (num) => {    const sign = num >= 0 ? '+' : '';    return `${sign}${num.toFixed(2)}%`;  };  return (    <SidebarProvider>      <div className="main-content">        {/* Panel de clientes (igual que liquidez) */}        <div          style={{            width: '300px',            backgroundColor: '#f9fafb',            borderRight: '1px solid #e5e7eb',            display: 'flex',            flexDirection: 'column',            height: '100vh',            overflow: 'hidden',          }}        >          <div style={{ padding: '1.5rem', borderBottom: '1px solid #e5e7eb', backgroundColor: '#fff' }}>            <h2 style={{ margin: '0 0 1rem 0', fontSize: '1.25rem', fontWeight: '600', color: '#111827' }}>              Clientes            </h2>            <input              type="text"              placeholder="🔍 Buscar cliente..."              value={searchQuery}              onChange={(e) => setSearchQuery(e.target.value)}              style={{                width: '100%',                padding: '0.625rem 0.875rem',                border: '1px solid #d1d5db',                borderRadius: '8px',                fontSize: '0.875rem',                outline: 'none',                transition: 'all 0.2s',              }}              onFocus={(e) => (e.target.style.borderColor = '#3b82f6')}              onBlur={(e) => (e.target.style.borderColor = '#d1d5db')}            />          </div>          <div style={{ flex: 1, overflowY: 'auto', padding: '0.75rem' }}>            {loading.clientes ? (              <div style={{ textAlign: 'center', padding: '2rem', color: '#6b7280' }}>                <div                  style={{                    width: '32px',                    height: '32px',                    border: '3px solid #e5e7eb',                    borderTopColor: '#3b82f6',                    borderRadius: '50%',                    animation: 'spin 0.8s linear infinite',                    margin: '0 auto 0.5rem',                  }}                ></div>                <p style={{ fontSize: '0.875rem', margin: 0 }}>Cargando...</p>              </div>            ) : filteredClientes.length === 0 ? (              <div style={{ textAlign: 'center', padding: '2rem', color: '#9ca3af' }}>                <p style={{ fontSize: '0.875rem', margin: 0 }}>No hay clientes</p>              </div>            ) : (              filteredClientes.map((c) => {                const isSelected = c.id === selectedClientId;                const initials = c.name                  ?.split(' ')                  .map((n) => n[0])                  .join('')                  .slice(0, 2)                  .toUpperCase() || '??';                return (                  <div                    key={c.id}                    onClick={() => setSelectedClientId(c.id)}                    style={{                      display: 'flex',                      alignItems: 'center',                      gap: '0.75rem',                      padding: '0.875rem',                      cursor: 'pointer',                      borderRadius: '8px',                      marginBottom: '0.5rem',                      backgroundColor: isSelected ? '#eff6ff' : '#fff',                      border: isSelected ? '2px solid #3b82f6' : '1px solid #e5e7eb',                      transition: 'all 0.2s',                      boxShadow: isSelected ? '0 1px 3px rgba(59, 130, 246, 0.1)' : 'none',                    }}                    onMouseEnter={(e) => {                      if (!isSelected) {                        e.currentTarget.style.backgroundColor = '#f3f4f6';                        e.currentTarget.style.transform = 'translateX(2px)';                      }                    }}                    onMouseLeave={(e) => {                      if (!isSelected) {                        e.currentTarget.style.backgroundColor = '#fff';                        e.currentTarget.style.transform = 'translateX(0)';                      }                    }}                  >                    <div                      style={{                        width: '40px',                        height: '40px',                        borderRadius: '50%',                        backgroundColor: isSelected ? '#3b82f6' : '#e5e7eb',                        color: isSelected ? '#fff' : '#6b7280',                        display: 'flex',                        alignItems: 'center',                        justifyContent: 'center',                        fontWeight: '600',                        fontSize: '0.875rem',                        flexShrink: 0,                      }}                    >                      {initials}                    </div>                    <div style={{ flex: 1, minWidth: 0 }}>                      <div                        style={{                          fontWeight: isSelected ? '600' : '500',                          fontSize: '0.9375rem',                          color: '#111827',                          whiteSpace: 'nowrap',                          overflow: 'hidden',                          textOverflow: 'ellipsis',                        }}                      >                        {c.name}                      </div>                      <div style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '2px' }}>                        <i className="fas fa-chart-line" style={{ marginRight: '0.25rem' }} /> Rendimientos                      </div>                    </div>                    {isSelected && (                      <div style={{ color: '#3b82f6', fontSize: '1rem', fontWeight: 'bold' }}>                        <i className="fas fa-check"></i>                      </div>                    )}                  </div>                );              })            )}          </div>        </div>        {/* Panel de contenido principal */}        <div className="content-panel">          <div className="page-header">            <div>              <h1 className="page-title">                <i className="fas fa-chart-line"></i> Rendimientos              </h1>              {clienteActual && <p className="page-subtitle">{clienteActual.name}</p>}            </div>          </div>          {/* Selector de período */}          {selectedClientId && (            <div              style={{                backgroundColor: '#fff',                border: '1px solid #e5e7eb',                borderRadius: '12px',                padding: '1.5rem',                marginBottom: '1.5rem',                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',              }}            >              <h3 style={{ margin: '0 0 1rem 0', fontSize: '1rem', fontWeight: '600', color: '#111827' }}>                <i className="fas fa-calendar-alt" style={{ marginRight: '0.5rem' }} />                Período de análisis              </h3>              {/* Presets de período */}              <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>                {[                  { value: 'ultimo_mes', label: 'Último mes' },                  { value: '3_meses', label: '3 meses' },                  { value: '6_meses', label: '6 meses' },                  { value: '1_ano', label: '1 año' },                  { value: 'ytd', label: 'Año actual' },                  { value: 'custom', label: 'Personalizado' },                ].map((preset) => (                  <button                    key={preset.value}                    onClick={() => handlePresetChange(preset.value)}                    style={{                      padding: '0.5rem 1rem',                      border: periodoPreset === preset.value ? '2px solid #3b82f6' : '1px solid #d1d5db',                      borderRadius: '6px',                      backgroundColor: periodoPreset === preset.value ? '#eff6ff' : '#fff',                      color: periodoPreset === preset.value ? '#3b82f6' : '#6b7280',                      fontSize: '0.875rem',                      fontWeight: periodoPreset === preset.value ? '600' : '500',                      cursor: 'pointer',                      transition: 'all 0.2s',                    }}                    onMouseEnter={(e) => {                      if (periodoPreset !== preset.value) {                        e.currentTarget.style.backgroundColor = '#f3f4f6';                      }                    }}                    onMouseLeave={(e) => {                      if (periodoPreset !== preset.value) {                        e.currentTarget.style.backgroundColor = '#fff';                      }                    }}                  >                    {preset.label}                  </button>                ))}              </div>              {/* Fechas (mostrar siempre, editable solo en custom) */}              <div style={{ display: 'flex', gap: '1rem' }}>                <div style={{ flex: 1 }}>                  <label                    style={{                      display: 'block',                      fontSize: '0.875rem',                      fontWeight: '500',                      color: '#374151',                      marginBottom: '0.5rem',                    }}                  >                    Fecha inicio                  </label>                  <input                    type="date"                    value={fechaInicio}                    onChange={(e) => setFechaInicio(e.target.value)}                    disabled={periodoPreset !== 'custom'}                    style={{                      width: '100%',                      padding: '0.625rem',                      border: '1px solid #d1d5db',                      borderRadius: '6px',                      fontSize: '0.875rem',                      backgroundColor: periodoPreset !== 'custom' ? '#f9fafb' : '#fff',                      cursor: periodoPreset !== 'custom' ? 'not-allowed' : 'text',                    }}                  />                </div>                <div style={{ flex: 1 }}>                  <label                    style={{                      display: 'block',                      fontSize: '0.875rem',                      fontWeight: '500',                      color: '#374151',                      marginBottom: '0.5rem',                    }}                  >                    Fecha fin                  </label>                  <input                    type="date"                    value={fechaFin}                    onChange={(e) => setFechaFin(e.target.value)}                    disabled={periodoPreset !== 'custom'}                    style={{                      width: '100%',                      padding: '0.625rem',                      border: '1px solid #d1d5db',                      borderRadius: '6px',                      fontSize: '0.875rem',                      backgroundColor: periodoPreset !== 'custom' ? '#f9fafb' : '#fff',                      cursor: periodoPreset !== 'custom' ? 'not-allowed' : 'text',                    }}                  />                </div>              </div>            </div>          )}          {/* Mensaje de error */}          {error && (            <div className="error-message">              <i className="fas fa-exclamation-triangle"></i> {error}            </div>          )}          {/* Loading spinner */}          {loading.rendimientos && <LoadingSpinner text="Calculando rendimientos..." />}          {/* Resumen (Summary Cards) */}          {!loading.rendimientos && selectedClientId && rendimientos && (            <>              <div                style={{                  display: 'grid',                  gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',                  gap: '1rem',                  marginBottom: '1.5rem',                }}              >                {/* Fondos Activos */}                <div                  style={{                    backgroundColor: '#fff',                    border: '1px solid #e5e7eb',                    borderRadius: '12px',                    padding: '1.25rem',                    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',                  }}                >                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>                    <div                      style={{                        width: '48px',                        height: '48px',                        borderRadius: '12px',                        backgroundColor: '#eff6ff',                        display: 'flex',                        alignItems: 'center',                        justifyContent: 'center',                        fontSize: '1.5rem',                        color: '#3b82f6',                      }}                    >                      <i className="fas fa-briefcase"></i>                    </div>                    <div>                      <div style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.25rem' }}>                        Fondos Activos                      </div>                      <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#111827' }}>                        {rendimientos.resumen.fondosActivos}                      </div>                    </div>                  </div>                </div>                {/* Valor Total */}                <div                  style={{                    backgroundColor: '#fff',                    border: '1px solid #e5e7eb',                    borderRadius: '12px',                    padding: '1.25rem',                    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',                  }}                >                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>                    <div                      style={{                        width: '48px',                        height: '48px',                        borderRadius: '12px',                        backgroundColor: '#f0fdf4',                        display: 'flex',                        alignItems: 'center',                        justifyContent: 'center',                        fontSize: '1.5rem',                        color: '#10b981',                      }}                    >                      <i className="fas fa-coins"></i>                    </div>                    <div>                      <div style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.25rem' }}>                        Valor Total                      </div>                      <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#111827' }}>                        {formatMoney(rendimientos.resumen.valorTotal)}                      </div>                    </div>                  </div>                </div>                {/* Flujos Netos */}                <div                  style={{                    backgroundColor: '#fff',                    border: '1px solid #e5e7eb',                    borderRadius: '12px',                    padding: '1.25rem',                    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',                  }}                >                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>                    <div                      style={{                        width: '48px',                        height: '48px',                        borderRadius: '12px',                        backgroundColor: '#fef3c7',                        display: 'flex',                        alignItems: 'center',                        justifyContent: 'center',                        fontSize: '1.5rem',                        color: '#f59e0b',                      }}                    >                      <i className="fas fa-exchange-alt"></i>                    </div>                    <div>                      <div style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.25rem' }}>                        Flujos Netos                      </div>                      <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#111827' }}>                        {formatMoney(rendimientos.resumen.flujosNetos)}                      </div>                    </div>                  </div>                </div>                {/* Rendimiento Promedio */}                <div                  style={{                    backgroundColor: '#fff',                    border: '1px solid #e5e7eb',                    borderRadius: '12px',                    padding: '1.25rem',                    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',                  }}                >                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>                    <div                      style={{                        width: '48px',                        height: '48px',                        borderRadius: '12px',                        backgroundColor: rendimientos.resumen.rendimientoPromedio >= 0 ? '#f0fdf4' : '#fef2f2',                        display: 'flex',                        alignItems: 'center',                        justifyContent: 'center',                        fontSize: '1.5rem',                        color: rendimientos.resumen.rendimientoPromedio >= 0 ? '#10b981' : '#dc2626',                      }}                    >                      <i className={`fas fa-${rendimientos.resumen.rendimientoPromedio >= 0 ? 'arrow-up' : 'arrow-down'}`}></i>                    </div>                    <div>                      <div style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.25rem' }}>                        Rendimiento Promedio                      </div>                      <div                        style={{                          fontSize: '1.5rem',                          fontWeight: '700',                          color: rendimientos.resumen.rendimientoPromedio >= 0 ? '#10b981' : '#dc2626',                        }}                      >                        {formatPercent(rendimientos.resumen.rendimientoPromedio)}                      </div>                    </div>                  </div>                </div>              </div>              {/* Lista de fondos con rendimientos */}              {rendimientos.fondos.length > 0 ? (                <div className="section">                  <h2 className="section-title">                    <i className="fas fa-chart-bar"></i> Rendimiento por Fondo                  </h2>                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(400px, 1fr))', gap: '1.5rem' }}>                    {rendimientos.fondos.map((fondo) => (                      <RendimientoCard key={fondo.id} fondo={fondo} />                    ))}                  </div>                </div>              ) : (                <div className="empty-state">                  <div className="empty-state-icon">                    <i className="fas fa-chart-line" style={{ fontSize: '48px', color: '#9ca3af' }}></i>                  </div>                  <h3 className="empty-state-title">Sin fondos en el período</h3>                  <p className="empty-state-description">                    No hay fondos con actividad en el período seleccionado                  </p>                </div>              )}            </>          )}          {/* Estado vacío sin cliente seleccionado */}          {!loading.rendimientos && !selectedClientId && (            <div className="empty-state">              <div className="empty-state-icon">                <i className="fas fa-user-circle" style={{ fontSize: '48px', color: '#9ca3af' }}></i>              </div>              <h3 className="empty-state-title">Selecciona un cliente</h3>              <p className="empty-state-description">                Elige un cliente de la lista para ver sus rendimientos              </p>            </div>          )}        </div>      </div>    </SidebarProvider>  );}